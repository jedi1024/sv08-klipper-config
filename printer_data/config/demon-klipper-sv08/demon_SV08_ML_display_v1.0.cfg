
[display_template _print_status]
text:
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time %}
    {% if printer.print_stats.filename %}
      { printer.print_stats.filename.split('/')[-1] }
    {% else %}
      Demon for Klipper
    {% endif %}
  {% else %}
    Demon for Klipper
  {% endif %}





########################################### 3dpd DEMONWARE
###########################################

[menu __main __tune __fanspeed]
type: disabled

[menu __main __tune __fanspeed]
type: input
name: Fan speed: {'%3d' % (menu.input*100)}%
input: {printer["fan"].speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    M106 S{'%d' % (menu.input*255)}

###########################################
###########################################

[menu __main __tune __chamber_fan_target]
type: input
name: ChmbrFanTrgt:{'%3d' % (menu.input)}%
enable: {printer["gcode_macro _START_VARIABLES"].chamber_fan == True}
input: {printer["temperature_fan chamber"].target}
input_min: 0
input_max: 100
input_step: 1
gcode:
    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={'%d' % (menu.input)}

[menu __main __tune __printer_lights]
type: input
name: LED Pwr: {'%03.0f' % (menu.input)}
input: {printer['output_pin Printer_Lights'].value*100}
input_min: 0
input_max: 100
input_step: 1
gcode:
    SET_PIN PIN=Printer_Lights VALUE={'%03.2f' % (menu.input/100)}


[menu __main __tune __neo_scrn_printing]
type: command
name: Neo Scrn Print
gcode:
    STATUS_PRINTING

[menu __main __tune __neo_scrn_off]
type: command
name: Neo Scrn off
gcode:
    STATUS_OFF

###########################################
###########################################



### menu DEMON ###
[menu __main __DEMON]
type: list
enable: {not (printer.print_stats.state == "paused" or printer.idle_timeout.state == "Printing")}
Index: 1
name: DEMON

[menu __main __DEMON __Heatsoak]
type: input
name: Heatsoak: {'OFF' if menu.input else 'ON'}
input: {printer["gcode_macro _START_VARIABLES"].start_my_print_already}
input_min: 0
input_max: 1
input_step: 1
gcode:
    SET_GCODE_VARIABLE MACRO=_START_VARIABLES VARIABLE=start_my_print_already VALUE={True if menu.input else False}


[menu __main __DEMON __Adptv_Mesh]
type: input
name: Adptv_Mesh: {'ON' if menu.input else 'OFF'}
input: {printer["gcode_macro _START_VARIABLES"].adaptive_meshing}
input_min: 0
input_max: 1
input_step: 1
gcode:
    SET_GCODE_VARIABLE MACRO=_START_VARIABLES VARIABLE=adaptive_meshing VALUE={True if menu.input else False}

[menu __main __DEMON __clean_nozzle]
type: command
enable: {printer["gcode_macro _START_VARIABLES"].nozzle_cleaner == True}
name: Clean Nozzle
gcode:  
    CLEAN_NOZZLE  

[menu __main __DEMON __present]
type: command
name: Present_Tlhead
gcode:  
    PRESENT_TOOLHEAD

[menu __main __DEMON __stow]
type: command
name: Stow Tlhead
gcode:  
    STOW_TOOLHEAD    

[menu __main __DEMON __zascender]
type: input
name: Z Ascender: {'%3d' % (menu.input)}%
input: 15 
input_min: 0
input_max: 50 # max out change to 100
input_step: 1
gcode:
    Z_ASCENDER HEIGHT={'%d' % (menu.input)}


###########################################
###########################################


[menu __main __prepare __rdy_up_cstm]
type: command
name: ReadyUp Custom
index: 1
gcode:  
    READY_UP_CUSTOM 

###########################################
###########################################

### timer menu
[menu __main __timer]
type: disabled

[menu __main __timer]
type: list
enable: {not (printer.print_stats.state == "paused" or printer.idle_timeout.state == "Printing")}
Index: 3
name: Timer

[menu __main __timer __timer_start]
type: input
name: Timer Min: {'%3d' % (menu.input)}
input: 10 
input_min: 0
input_max: 60
input_step: 1
gcode:
    TIMER_Start MINUTES={'%d' % (menu.input)}

[menu __main __timer __timer_stop]
type: command
name: Timer Stop
gcode: 
      TIMER_Stop

###########################################
###########################################

### menu levelling ###

[menu __main __levelling __probe_cal]
type: command
name: Probe Calibrate
index: 0
gcode:
     Z_PROBE_CALIBRATE_COLD

[menu __main __levelling __machine_lvl_cld]
type: command
enable: {('quad_gantry_level' in printer)}
name: Machine Lvl Cld
index: 1
gcode:
    M117 Machine Level Cold
    MACHINE_LEVEL_COLD

[menu __main __levelling __machine_lvl_hot]
type: command
enable: {('quad_gantry_level' in printer)}
name: Machine Lvl Hot
index: 2
gcode:
    M117 Machine Level Hot
    MACHINE_LEVEL_HOT

[menu __main __levelling __qik_mesh]
type: command
enable: {('bed_mesh' in printer)}
name: Quick Mesh
index: 3
gcode: 
    M117 Quick Mesh
    QUICK_MESH
   
[menu __main __levelling __hot_mesh]
type: command
enable: {('bed_mesh' in printer)}
name: Hot Mesh
index: 4
gcode: 
    M117 Hot Mesh
    HOT_MESH

###########################################
###########################################


[menu __main __control2 __chamber_fan_target]
type: input
name: ChmbrFanTrgt:{'%3d' % (menu.input)}%
enable: {printer["gcode_macro _START_VARIABLES"].chamber_fan == True}
input: {printer["temperature_fan chamber"].target}
input_min: 0
input_max: 100
input_step: 1
gcode:
    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={'%d' % (menu.input)}

###########################################
###########################################

### menu control ###

[menu __main __filament __load_clean]
type: command
enable: {printer["gcode_macro _START_VARIABLES"].nozzle_cleaner == True and printer["gcode_macro _START_VARIABLES"].purge_bucket == True}
name: Load Clean
gcode:  
    LOAD_CLEAN  

[menu __main __filament __unload_clean]
type: command
enable: {printer["gcode_macro _START_VARIABLES"].nozzle_cleaner == True and printer["gcode_macro _START_VARIABLES"].purge_bucket == True}
name: Unload Clean
gcode:  
    UNLOAD_CLEAN  


[menu __main __control2 __fanspeed]
type: disabled


[menu __main __control2 __exhaustfanspeed]
type: disabled


[menu __main __control2 __ledonoff]
type: disabled


########################################### 3dpd DEMONWARE
###########################################

[menu __main __control2 __fanspeed]
type: input
name: Fan speed: {'%3d' % (menu.input*100)}%
input: {printer["fan"].speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    M106 S{'%d' % (menu.input*255)}

[menu __main __control2 __exhaustfanspeed]
type: input
enable: {printer["gcode_macro _START_VARIABLES"].chamber_fan == False}
name: ExhaustFan:{'%3d' % (menu.input*100)}%
input: {printer["fan_generic fan3"].speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    M106 P3 S{'%d' % (menu.input*255)}

[menu __main __control2 __chamber_fan_target]
type: input
name: ChmbrFanTrgt:{'%3d' % (menu.input)}%
enable: {printer["gcode_macro _START_VARIABLES"].chamber_fan == True}
input: {printer["temperature_fan chamber"].target}
input_min: 0
input_max: 100
input_step: 1
gcode:
    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={'%d' % (menu.input)}

###########################################
###########################################

### Lighting Menu
[menu __main __lighting]
type: list
Index: 7
name: Lighting

[menu __main __lighting __printer_lights]
type: input
name: LED Pwr: {'%03.0f' % (menu.input)}
input: {printer['output_pin Printer_Lights'].value*100}
input_min: 0
input_max: 100
input_step: 20
gcode:
    SET_PIN PIN=Printer_Lights VALUE={'%03.2f' % (menu.input/100)}

[menu __main __lighting __neo_scrn_rdy]
type: command
name: Neo Scrn Rdy
gcode:
    STATUS_READY

[menu __main __lighting __neo_scrn_printing]
type: command
name: Neo Scrn Print
gcode:
    STATUS_PRINTING

[menu __main __lighting __neo_scrn_off]
type: command
name: Neo Scrn off
gcode:
    STATUS_OFF

###########################################
###########################################

### Power Menu
[menu __main __power]
type: list
Index: 8
name: Power

[menu __main __power __klipper_rstrt]
type: command
name: Klipper Restart
gcode:
    RESTART

[menu __main __power __host_reboot]
type: command
name: Host Reboot
gcode:
    {action_call_remote_method("restart_machine")}

[menu __main __power __host_off]
type: command
name: Host ShutDown
gcode:
    {action_call_remote_method("shutdown_machine")}

########################################### 
###########################################


