# https://github.com/ss1gohan13/A-better-print_start-macro-SV08

[gcode_macro PRINT_START]
gcode:
    START_PRINT { rawparams }

[gcode_macro START_PRINT]
gcode:
    # This part fetches data from your slicer, such as bed temp, extruder temp, chamber temp, and the size of your printer.
    {% set target_bed = params.BED|int %}
    {% set target_extruder = params.EXTRUDER|int %}
    {% set raw_material = params.FILAMENT|default("PLA")|string|upper %}
    {% set target_chamber = params.CHAMBER|default("40")|int %}
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
    {% set skew_profile = printer["gcode_macro _USER_VARIABLES"].skew_profile %}

    RESPOND TYPE=COMMAND MSG="Filament Detected: {raw_material}"

    # Homes the printer, sets absolute positioning, and updates the Stealthburner LEDs.
    STATUS_HOMING
    # Check homing status and home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                                                      # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        G28 Z                                                    # Home Z if only Z is unhomed
    {% endif %}

    G90                                                          # Use absolute/relative coordinates
    M400                                                         # Wait for current moves to finish
    CLEAR_PAUSE                                                  # Clear any existing pause state

    # Uncomment for bed mesh (1 of 2)
    BED_MESH_CLEAR                                               # Clears old saved bed mesh (if any)

    # Checks if the bed temp is higher than 90C - if so, then trigger a heat soak.
    {% if params.BED|int > 90 %}
        # Display bed temperature
        SET_DISPLAY_TEXT MSG="Bed: {target_bed}C"

        # Sets SB-LEDs to heating-mode
        STATUS_HEATING

        # Turns on the PT-fan
        M106 S255
        # Conditional check for nevermore pin
        {% if printer["output_pin nevermore"] is defined %}
            # Turns on the Nevermore
            SET_PIN PIN=nevermore VALUE=1
        {% endif %}
        # Go to the center of the bed
        G1 X{x_wait} Y{y_wait} Z5 F9000
        # Sets the target temp for the bed
        M190 S{target_bed}

        # Start chamber heating progress monitoring
        # Display chamber monitoring status
        SET_DISPLAY_TEXT MSG="Monitoring chamber: {target_chamber}C"

        # Conditional check for chamber thermistor
        {% if printer["temperature_sensor chamber"] is defined %}
            # Waits for the chamber to reach the desired temp
            TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}
        {% else %}
            # Waits for 15mins when chamber is not available
            _HEAT_WAIT MINUTES={15}
        {% endif %}
    {% else %}
        # If the bed temp is not over 90c, then handle soak based on material
        # Display bed temperature
        SET_DISPLAY_TEXT MSG="Bed: {target_bed}C"
        # Sets SB-leds to heating-mode
        STATUS_HEATING
        # Go to center of the bed
        G1 X{x_wait} Y{y_wait} Z5 F9000
        # Sets the target temp for the bed
        M190 S{target_bed}

        # Material-based soak times with variant handling
        SET_DISPLAY_TEXT MSG=""

        # Extract base material type by handling variants
        {% set material = namespace(type="") %}
        {% if "PLA" in raw_material %}
            {% set material.type = "PLA" %}
        {% elif "PETG" in raw_material %}
            {% set material.type = "PETG" %}
        {% elif "TPU" in raw_material or "TPE" in raw_material %}
            {% set material.type = "TPU" %}
        {% elif "PVA" in raw_material %}
            {% set material.type = "PVA" %}
        {% elif "HIPS" in raw_material %}
            {% set material.type = "HIPS" %}
        {% else %}
            {% set material.type = raw_material %}
        {% endif %}

        # Define soak times
        {% set soak_time = {
            "PLA": 3,    # 3 minutes - Standard PLA soak time
            "PETG": 4,   # 4 minutes - PETG needs slightly longer to stabilize
            "TPU": 3,    # 3 minutes - TPU/TPE materials
            "PVA": 3,    # 3 minutes - Support material, similar to PLA
            "HIPS": 4    # 4 minutes - When used as support/primary under 90C
        }[material.type]|default(5) %}                      # Default to 5 minutes if material not found

        # Display soak time and material
        SET_DISPLAY_TEXT MSG="Soak: {soak_time}min ({raw_material})"
        # Execute soak timer
        _HEAT_WAIT MINUTES={soak_time}
    {% endif %}

    # Check if GANTRY_LEVELING macro exists, use it if available
    {% if printer.configfile.config['gcode_macro GANTRY_LEVELING'] is defined %}
        # Sets SB-LEDs to leveling-mode
        STATUS_LEVELING
        # Display gantry leveling status
        SET_DISPLAY_TEXT MSG="Gantry Leveling..."
        # Performs the appropriate leveling method (QGL or Z_TILT)
        GANTRY_LEVELING
    {% else %}
        # Fallback to traditional method if GANTRY_LEVELING doesn't exist
        # Conditional method for Z_TILT_ADJUST and QUAD_GANTRY_LEVEL
        {% if 'quad_gantry_level' in printer %}
            # Sets SB-LEDs to leveling-mode
            STATUS_LEVELING
            # Display QGL status
            SET_DISPLAY_TEXT MSG="QGL..."
            # Levels the gantry
            QUAD_GANTRY_LEVEL
        {% endif %}
    {% endif %}
    # Conditional check to ensure Z is homed after leveling procedures
    {% if 'z' not in printer.toolhead.homed_axes %}
        # Sets SB-LEDs to homing-mode
        STATUS_HOMING
        # Display Z homing status
        SET_DISPLAY_TEXT MSG="Z homing"
        # Home Z if needed after leveling
        G28 Z
    {% endif %}

    # Heating the nozzle to 150C. This helps with getting a correct Z-home
    # Sets SB-LEDs to heating-mode
    STATUS_HEATING
    # Display hotend temperature
    SET_DISPLAY_TEXT MSG="Hotend: 150C"
    # Heats the nozzle to 150C
    M109 S150

    SET_DISPLAY_TEXT MSG="Cleaning the nozzle..."
    # Sets SB-LEDs to cleaning-mode
    STATUS_CLEANING
    # Clean nozzle before printing
    CLEAN_NOZZLE #EXTRUDER={target_extruder}

    # Display wait message
    SET_DISPLAY_TEXT MSG="Nozzle cooling 150C..."
    # Heats the nozzle to 150C
    M109 S150

    # Display wait message
    SET_DISPLAY_TEXT MSG="Hang tight..."
    # Wait 30s to stabilize
    G4 P30

    # Sets SB-LEDs to z-calibration-mode
    STATUS_CALIBRATING_Z
    # Display tappy tap message
    SET_DISPLAY_TEXT MSG="Tappy Tap..."
    # run Eddy-NG Tap, See: https://hackmd.io/yEF4CEntSHiFTj230CdD0Q
    PROBE_EDDY_NG_TAP

    # KAMP Smart Park the toolhead near the beginning of the print
    SMART_PARK

    {% if skew_profile is defined %}
        RESPOND TYPE=COMMAND MSG="Loading Skew Profile: {skew_profile}"
        SKEW_PROFILE LOAD=calilantern_skew_profile
        RESPOND TYPE=COMMAND MSG="Skew Profile: {skew_profile} is loaded"
    {% endif %}

    # Uncomment for bed mesh (2 of 2)
    # Sets SB-LEDs to bed mesh-mode
    STATUS_MESHING
    # Display bed mesh status
    SET_DISPLAY_TEXT MSG="Bed mesh"
    # Starts bed mesh  Uncomment Method=rapid_scan for eddy rapid bed meshing
    BED_MESH_CALIBRATE ADAPTIVE=1 Method=rapid_scan
    # Wait for current moves to finish
    M400

    # KAMP smart park
    SMART_PARK

    # Heats up the nozzle to target via data from the slicer
    # Display target hotend temperature
    SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}C"
    # Sets SB-LEDs to heating-mode
    STATUS_HEATING
    # Turns off part cooling fan
    M107
    # Heats the nozzle to printing temp
    M109 S{target_extruder}

    # Gets ready to print by doing a purge line and updating the SB-LEDs
    # Display purge status
    SET_DISPLAY_TEXT MSG="Purge Nozzle"
    # Sets SB-LEDs to cleaning-mode
    STATUS_CLEANING
    # KAMP line purge
    LINE_PURGE

    # Display print starting
    SET_DISPLAY_TEXT MSG="Printer goes brrr"
    # Sets SB-LEDs to printing-mode
    STATUS_PRINTING